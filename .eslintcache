[{"/home/gc/gc/react/gcboard/src/index.js":"1","/home/gc/gc/react/gcboard/src/App.js":"2","/home/gc/gc/react/gcboard/src/components/HeaderMenu.js":"3","/home/gc/gc/react/gcboard/src/components/Board.js":"4","/home/gc/gc/react/gcboard/src/components/Cards.js":"5","/home/gc/gc/react/gcboard/src/components/Lists.js":"6","/home/gc/gc/react/gcboard/src/api/api.js":"7","/home/gc/gc/react/gcboard/src/components/Error.js":"8","/home/gc/gc/react/gcboard/src/components/NewBoard.js":"9","/home/gc/gc/react/gcboard/src/components/News.js":"10","/home/gc/gc/react/gcboard/src/components/Weather.js":"11","/home/gc/gc/react/gcboard/src/components/TimeAndDate.js":"12","/home/gc/gc/react/gcboard/src/components/Profile.js":"13","/home/gc/gc/react/gcboard/src/components/BoardList.js":"14"},{"size":219,"mtime":1613404203866,"results":"15","hashOfConfig":"16"},{"size":4112,"mtime":1619483545899,"results":"17","hashOfConfig":"16"},{"size":2947,"mtime":1619483427880,"results":"18","hashOfConfig":"16"},{"size":4280,"mtime":1618981233208,"results":"19","hashOfConfig":"16"},{"size":18854,"mtime":1619100888429,"results":"20","hashOfConfig":"16"},{"size":12804,"mtime":1619102801437,"results":"21","hashOfConfig":"16"},{"size":812,"mtime":1614979794559,"results":"22","hashOfConfig":"16"},{"size":831,"mtime":1614935072334,"results":"23","hashOfConfig":"16"},{"size":6154,"mtime":1619102242068,"results":"24","hashOfConfig":"16"},{"size":1436,"mtime":1618443866561,"results":"25","hashOfConfig":"16"},{"size":2865,"mtime":1619484235819,"results":"26","hashOfConfig":"16"},{"size":1324,"mtime":1619103445280,"results":"27","hashOfConfig":"16"},{"size":641,"mtime":1615240630313,"results":"28","hashOfConfig":"29"},{"size":3126,"mtime":1619102634553,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"s5h7as",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3jh964",{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},"/home/gc/gc/react/gcboard/src/index.js",[],["63","64"],"/home/gc/gc/react/gcboard/src/App.js",[],"/home/gc/gc/react/gcboard/src/components/HeaderMenu.js",["65"],"/home/gc/gc/react/gcboard/src/components/Board.js",[],"/home/gc/gc/react/gcboard/src/components/Cards.js",[],"/home/gc/gc/react/gcboard/src/components/Lists.js",["66"],"import { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Button from \"@material-ui/core/Button\";\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\nimport { ACTIONS } from \"../App\";\n\nimport styled from \"styled-components/macro\";\nimport {\n  faEllipsisH,\n  faPlus,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"@material-ui/core/Modal\";\n\nexport default function Lists({\n  state,\n  dispatch,\n  handleModalOpen,\n  setOpen,\n  currentBoard,\n}) {\n  const [card, setCard] = useState(\"\");\n  const [editListTitle, setEditListTitle] = useState({\n    listTitle: \"\",\n    edit: false,\n  });\n\n  const { lists } = currentBoard;\n\n  editListTitle.edit &&\n    window.addEventListener(\n      \"keydown\",\n      (e) =>\n        e.code === \"Escape\" && setEditListTitle({ listTitle: \"\", edit: false })\n    );\n\n  const renderAddCard = (index, listTitle) => {\n    const show = state.showAddCard\n      ? state.showAddCard.id === index\n        ? state.showAddCard.show\n        : false\n      : false;\n    return (\n      <AddCard show={show}>\n        <input\n          value={card}\n          placeholder=\"Enter card title\"\n          onChange={(e) => {\n            setCard(e.target.value);\n          }}\n          onKeyDown={(e) => {\n            e.target.value !== \"\" &&\n              (e.code === \"Enter\" || e.code === \"NumpadEnter\") &&\n              addCard(listTitle);\n          }}\n        />\n        <div>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              if (card !== \"\") {\n                addCard(listTitle);\n              } else {\n                errorModalOpen(\"Card must have title\");\n              }\n            }}\n          >\n            Add\n          </Button>\n          <XButton>\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={() => {\n                if (index === state.showAddCard.id) {\n                  dispatch({ type: ACTIONS.ADD_CARD, index });\n                }\n              }}\n            />\n          </XButton>\n        </div>\n      </AddCard>\n    );\n  };\n\n  const renderCards = (listTitle) => {\n    if (lists.length !== 0) {\n      const currentList = lists.filter((list) => list.title === listTitle);\n      return currentList[0].cards.map((item, index) => {\n        return (\n          <ListItems\n            key={index}\n            onClick={() => {\n              setOpen(true);\n              handleModalOpen(item, currentList[0].title, index);\n            }}\n          >\n            <div>{item.title}</div>\n            <div>\n              {item.labels\n                ? item.labels.map(\n                    (label, index) =>\n                      label.selected && (\n                        <LabelBox key={index} color={label.color} />\n                      )\n                  )\n                : null}\n            </div>\n          </ListItems>\n        );\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const renderAddList = () => {\n    return (\n      <AddList>\n        <input\n          placeholder=\"Enter list title\"\n          onChange={(e) => {\n            dispatch({\n              type: ACTIONS.ADD_LIST,\n              add: true,\n              value: e.target.value,\n            });\n          }}\n        />\n        <div>\n          <Button\n            variant=\"contained\"\n            onClick={(e) => {\n              e.preventDefault();\n              addList();\n            }}\n          >\n            Add\n          </Button>\n          <XButton>\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={() => {\n                dispatch({ type: ACTIONS.ADD_LIST, add: false, value: \"\" });\n              }}\n            />\n          </XButton>\n        </div>\n      </AddList>\n    );\n  };\n\n  const showListMenu = (listTitle, index) => {\n    return (\n      <ListMenu className=\"listMenu\">\n        <div className=\"listMenu\">Sort by</div>\n        <div\n          className=\"listMenu\"\n          onClick={() => {\n            deleteList(listTitle);\n            dispatch({ type: ACTIONS.LIST_MENU, index });\n          }}\n        >\n          Delete\n        </div>\n      </ListMenu>\n    );\n  };\n\n  const errorModalOpen = (message) => {\n    dispatch({ type: ACTIONS.SHOW_MODAL, payload: { show: true, message } });\n  };\n\n  const onModalClose = () => {\n    dispatch({\n      type: ACTIONS.SHOW_MODAL,\n      payload: { show: false, message: \"\" },\n    });\n  };\n\n  const showErrorModal = (message) => {\n    return (\n      <Modal\n        open={state.showModal.show}\n        onClose={onModalClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <Error message={message} />\n      </Modal>\n    );\n  };\n\n  const addCard = (listTitle) => {\n    const time =\n      new Date().getHours() > 12\n        ? `${new Date().getHours() - 12}:${new Date().getMinutes()}PM`\n        : `${new Date().getHours()}:${new Date().getMinutes()}AM`;\n    const timeStamp = `${time} ${new Date().getMonth()}/${new Date().getDate()}/${new Date().getFullYear()}`;\n    const newCard = {\n      title: card,\n      timeStamp,\n      description: \"\",\n      comments: [{ text: `Card created`, created: timeStamp }],\n    };\n    const list = lists.find((item) => item.title === listTitle);\n    list.cards = [...list.cards, newCard];\n\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: [...state.board] },\n    });\n    setCard(\"\");\n  };\n\n  const addList = () => {\n    if (state.addList.title !== \"\") {\n      lists.push({ title: state.addList.title, cards: [] });\n      dispatch({\n        type: ACTIONS.CURRENT_BOARD,\n        payload: { newBoard: [...state.board] },\n      });\n      dispatch({ type: ACTIONS.ADD_LIST, add: false, value: \"\" });\n    } else {\n      errorModalOpen(\"List must have title\");\n    }\n  };\n\n  const deleteList = (listTitle) => {\n    const updatedList = lists.filter((item) => item.title !== listTitle);\n    const newBoard = {\n      name: currentBoard.name,\n      selected: currentBoard.selected,\n      lists: updatedList,\n      type: currentBoard.type,\n      id: currentBoard.id,\n    };\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: [newBoard] },\n    });\n  };\n\n  const changeListName = () => {\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: state.board },\n    });\n    setEditListTitle({ listTitle: \"\", edit: false });\n  };\n\n  return (\n    <ListContainer>\n      {showErrorModal(state.showModal.message)}\n\n      <div>\n        {lists.map((item, index) => {\n          const show =\n            state.showAddCard.id === index ? !state.showAddCard.show : true;\n\n          return (\n            <List key={index} className=\"list\">\n              {state.listMenu\n                ? state.listMenu.id === index &&\n                  state.listMenu.show &&\n                  showListMenu(item.title, index)\n                : null}\n              <ListHeader>\n                <div\n                  onClick={() => {\n                    dispatch({ type: ACTIONS.LIST_MENU, index });\n                  }}\n                >\n                  <FontAwesomeIcon icon={faEllipsisH} />\n                </div>\n                <ListTitle\n                  onClick={() =>\n                    setEditListTitle({ listTitle: item.title, edit: true })\n                  }\n                >\n                  {editListTitle.edit &&\n                  editListTitle.listTitle === item.title ? (\n                    <input\n                      defaultValue={item.title}\n                      onChange={(e) => {\n                        currentBoard.lists[index].title = e.target.value;\n                      }}\n                      onKeyDown={(e) =>\n                        e.target.value !== \"\" &&\n                        (e.code === \"Enter\" || e.code === \"NumpadEnter\") &&\n                        changeListName()\n                      }\n                      autoFocus={true}\n                    />\n                  ) : (\n                    <a rel=\"noreferrer\">{item.title}</a>\n                  )}\n                </ListTitle>\n              </ListHeader>\n\n              <section>{renderCards(item.title)}</section>\n              <section>\n                {renderAddCard(index, item.title)}\n                <AddAnotherCard\n                  show={show}\n                  onClick={() => {\n                    dispatch({ type: ACTIONS.ADD_CARD, index });\n                  }}\n                >\n                  <FontAwesomeIcon icon={faPlus} /> Add another card\n                </AddAnotherCard>\n              </section>\n            </List>\n          );\n        })}\n        <AddAnotherList>\n          {state.addList.add ? (\n            renderAddList()\n          ) : (\n            <div\n              onClick={() =>\n                dispatch({\n                  type: ACTIONS.ADD_LIST,\n                  add: true,\n                  value: state.addList.title,\n                })\n              }\n            >\n              <FontAwesomeIcon icon={faPlus} />{\" \"}\n              {lists.length !== 0 ? \"Add Another List\" : \"Add a list\"}\n            </div>\n          )}\n        </AddAnotherList>\n      </div>\n    </ListContainer>\n  );\n}\n\nLists.propTypes = {\n  state: PropTypes.shape({\n    addList: PropTypes.shape({\n      add: PropTypes.bool.isRequired,\n      title: PropTypes.string,\n    }).isRequired,\n    currentBoard: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        selected: PropTypes.bool.isRequired,\n        lists: PropTypes.array,\n      })\n    ),\n    listMenu: PropTypes.shape({\n      id: PropTypes.number,\n      show: PropTypes.bool.isRequired,\n    }).isRequired,\n    showAddCard: PropTypes.shape({\n      id: PropTypes.number,\n      show: PropTypes.bool.isRequired,\n    }).isRequired,\n    showModal: PropTypes.shape({\n      show: PropTypes.bool.isRequired,\n      message: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  handleModalOpen: PropTypes.func.isRequired,\n  setOpen: PropTypes.func.isRequired,\n};\n\n/*\n\n\n\n\nStyles\n\n\n\n\n\n*/\n\nconst ListContainer = styled.div`\n  width: 100%;\n  height: fit-content;\n  margin-top: 26vh;\n  > div {\n    display: flex;\n  }\n`;\n\nconst List = styled.div`\n  min-width: 18rem;\n  height: fit-content;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(1.5px);\n  margin: 0 0.75rem 0 0.75rem;\n  padding: 0.5rem;\n  border-radius: 0.5rem;\n  color: white;\n  font-weight: 500;\n`;\n\nconst ListItems = styled.div`\n  padding: 0.5rem;\n  margin: 0.75rem 0 0.75rem 0;\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: 0.5s;\n  box-shadow: 0 0 3px 0.2px white;\n  display: flex;\n  justify-content: space-between;\n  &:hover {\n    filter: brightness(50%);\n    transition: 0.5s;\n  }\n  > div:nth-child(2) {\n    display: flex;\n  }\n`;\n\nconst ListHeader = styled.div`\n  height: 5vh;\n  display: flex;\n  flex-direction: column;\n  > div:nth-child(1) {\n    cursor: pointer;\n    width: fit-content;\n    position: absolute;\n  }\n`;\n\nconst ListTitle = styled.div`\n  height: 100%;\n  text-align: center;\n  font-weight: 600;\n  font-size: 1.5rem;\n  display: flex;\n  justify-content: center;\n\n  > a {\n    cursor: pointer;\n    text-decoration: none;\n    color: inherit;\n    align-self: center;\n  }\n\n  > input {\n    height: 2rem;\n    align-self: center;\n    background-color: transparent;\n    outline: none;\n    border: none;\n    color: white;\n    font-weight: 600;\n    font-size: 1.5rem;\n    text-align: center;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n\n  > input::placeholder {\n    font-size: 1.5rem;\n    color: white;\n    background-color: rgba(0, 0, 0, 0.5);\n    text-align: center;\n    font-weight: 600;\n  }\n`;\n\nconst XButton = styled.div`\n  font-size: 2rem;\n  vertical-align: middle;\n`;\n\nconst AddAnotherCard = styled.div`\n  display: ${(props) => (props.show ? \"flex\" : \"none\")};\n  cursor: pointer;\n`;\n\nconst AddList = styled.div`\n  display: flex;\n  flex-direction: column;\n  > input {\n    height: 1.5rem;\n  }\n  > div {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 1rem;\n  }\n`;\n\nconst AddCard = styled(AddList)`\n  display: ${(props) => (props.show ? \"flex\" : \"none\")};\n`;\n\nconst AddAnotherList = styled(List)``;\n\nconst ListMenu = styled.div`\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.568);\n  backdrop-filter: blur(1.5px);\n  width: 95.5%;\n  text-align: center;\n  font-weight: 600;\n  bottom: 105%;\n  z-index: -10;\n  > div {\n    padding: 0.5rem 0;\n    cursor: pointer;\n    transition: 0.3s ease-in-out;\n    &:hover {\n      filter: brightness(50%);\n      transition: 0.3s ease-in-out;\n    }\n  }\n`;\n\nconst LabelBox = styled.div`\n  background-color: ${(props) => (props.color ? props.color : null)};\n  width: 1.2rem;\n  height: inherit;\n`;\n","/home/gc/gc/react/gcboard/src/api/api.js",[],"/home/gc/gc/react/gcboard/src/components/Error.js",[],"/home/gc/gc/react/gcboard/src/components/NewBoard.js",["67"],"import Error from \"./Error\";\nimport { ACTIONS } from \"../App\";\nimport { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport styled from \"styled-components/macro\";\nimport Modal from \"@material-ui/core/Modal\";\n\nexport default function NewBoard({\n  newBoard,\n  setNewBoard,\n  addNewBoard,\n  state,\n  dispatch,\n  setCreateNew,\n  currentBoard,\n}) {\n  const boardTypes = [\n    {\n      name: \"No Template\",\n      image: \"\",\n      template: [],\n    },\n    {\n      name: \"Kanban Board\",\n      image: \"\",\n      template: [\n        {\n          title: \"Backlog\",\n          cards: [],\n        },\n        {\n          title: \"Design\",\n          cards: [],\n        },\n        {\n          title: \"To Do\",\n          cards: [],\n        },\n        {\n          title: \"Doing\",\n          cards: [],\n        },\n        {\n          title: \"Pending\",\n          cards: [],\n        },\n        {\n          title: \"Testing\",\n          cards: [],\n        },\n        {\n          title: \"Done\",\n          cards: [],\n        },\n      ],\n    },\n    {\n      name: \"Project Management\",\n      image: \"\",\n      template: [\n        {\n          title: \"Project Resources\",\n          cards: [],\n        },\n        {\n          title: \"Questions For Next Meeting\",\n          cards: [],\n        },\n        {\n          title: \"To Do\",\n          cards: [],\n        },\n        {\n          title: \"Pending\",\n          cards: [],\n        },\n        {\n          title: \"Blocked\",\n          cards: [],\n        },\n        {\n          title: \"Done\",\n          cards: [],\n        },\n      ],\n    },\n  ];\n  const [selectedType, setSelectedType] = useState(\"\");\n\n  useEffect(() => {\n    window.addEventListener(\n      \"keydown\",\n      (e) => e.key === \"Escape\" && setCreateNew(false)\n    );\n  }, []);\n\n  const createNewBoard = () => {\n    if (state.board.find((board) => board.name === newBoard.name)) {\n      errorModalOpen(\"Can't add board with same name\");\n      return;\n    } else {\n      if (currentBoard) {\n        currentBoard.selected = false;\n      }\n      const board = boardTypes.find((board) => board.name === selectedType);\n      newBoard.type = selectedType;\n      newBoard.lists = board.template;\n      setNewBoard(newBoard);\n      addNewBoard();\n      setCreateNew(false);\n    }\n  };\n\n  const errorModalOpen = (message) => {\n    dispatch({ type: ACTIONS.SHOW_MODAL, payload: { show: true, message } });\n  };\n\n  const onModalClose = () => {\n    dispatch({\n      type: ACTIONS.SHOW_MODAL,\n      payload: { show: false, message: \"\" },\n    });\n  };\n\n  const showErrorModal = (message) => {\n    return (\n      <Modal\n        open={state.showModal.show}\n        onClose={onModalClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <Error message={message} />\n      </Modal>\n    );\n  };\n\n  return (\n    <NewBoardContainer>\n      {showErrorModal(state.showModal.message)}\n      <div>\n        <h1>Create new board</h1>\n      </div>\n      <div>\n        <input\n          placeholder=\"Name of new board\"\n          value={newBoard.name}\n          onChange={(e) => {\n            setNewBoard({\n              name: e.target.value,\n              selected: true,\n              lists: [],\n              type: \"\",\n              id: uuidv4(),\n            });\n          }}\n        />\n      </div>\n      <div>\n        <h2>Choose board template</h2>\n        <div>\n          {boardTypes.map((type, index) => (\n            <div key={index} onClick={() => setSelectedType(type.name)}>\n              <TemplateName\n                color={selectedType === type.name ? \"white\" : null}\n                shadow={selectedType === type.name ? true : false}\n              >\n                {type.name}\n              </TemplateName>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div>\n        <CreateButton\n          onClick={() => {\n            if (newBoard.name === \"\") {\n              errorModalOpen(\"Board must have title\");\n            } else if (selectedType === \"\") {\n              errorModalOpen(\"Please choose a template\");\n            } else {\n              createNewBoard();\n            }\n          }}\n        >\n          Create\n        </CreateButton>\n      </div>\n    </NewBoardContainer>\n  );\n}\n\nNewBoard.propTypes = {\n  newBoard: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    selected: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n    lists: PropTypes.array,\n  }).isRequired,\n  setNewBoard: PropTypes.func.isRequired,\n  addNewBoard: PropTypes.func.isRequired,\n};\n\nconst NewBoardContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  backdrop-filter: blur(1.5px);\n  > div:nth-child(1) {\n    font-size: 3rem;\n    color: white;\n  }\n  > div:nth-child(2) {\n    text-align: center;\n    width: 100%;\n    > input {\n      width: 50vw;\n      height: 10vh;\n      font-size: 3rem;\n      text-align: center;\n      outline: none;\n      font-weight: 600;\n    }\n  }\n  > div:nth-child(3) {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    color: white;\n    font-size: 2rem;\n    margin: 2rem 0 1rem 0;\n    > div {\n      width: 60vw;\n      align-self: center;\n      border: 2px white solid;\n      display: grid;\n      grid-template-columns: 1fr 1fr 1fr;\n      > div {\n        align-self: center;\n      }\n    }\n  }\n`;\n\nconst TemplateName = styled.h3`\n  color: ${(props) => (props.color ? props.color : \"rgba(255, 255, 255, 0.5)\")};\n  text-shadow: ${(props) => (props.shadow ? \"0px 5px 10px white\" : \"none\")};\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst CreateButton = styled.button`\n  color: white;\n  border: none;\n  outline: none;\n  font-size: 1.5rem;\n  padding: 1rem;\n  background-color: rgba(0, 0, 0, 0.5);\n  box-shadow: 0 0 5px 0.2px;\n  border-radius: 0.2rem;\n  cursor: pointer;\n  transition: 0.2s;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    transition: 0.2s;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n`;\n","/home/gc/gc/react/gcboard/src/components/News.js",[],"/home/gc/gc/react/gcboard/src/components/Weather.js",[],"/home/gc/gc/react/gcboard/src/components/TimeAndDate.js",[],"/home/gc/gc/react/gcboard/src/components/Profile.js",[],"/home/gc/gc/react/gcboard/src/components/BoardList.js",["68"],"import { useState, useEffect } from \"react\";\nimport { ACTIONS } from \"../App\";\n\nimport styled from \"styled-components/macro\";\n\nexport default function BoardList({\n  setBoardList,\n  setCreateNew,\n  state,\n  dispatch,\n}) {\n  const [selectedBoard, setSelectedBoard] = useState();\n\n  useEffect(() => {\n    window.addEventListener(\n      \"keydown\",\n      (e) => e.key === \"Escape\" && setBoardList({ show: false })\n    );\n  }, []);\n\n  const createNewBoard = () => {\n    setBoardList({ show: false });\n    setCreateNew(true);\n  };\n\n  const openBoard = () => {\n    state.board.forEach((board) => (board.selected = false));\n    selectedBoard.selected = true;\n    setBoardList({ show: false });\n  };\n\n  const deleteBoard = () => {\n    state.board = state.board.filter((board) => board.id !== selectedBoard.id);\n    if (state.board.length !== 0) {\n      state.board[0].selected = true;\n    }\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: state.board },\n    });\n  };\n\n  return (\n    <BoardListContainer>\n      <header>\n        <BoardListTitle>Boards List</BoardListTitle>\n      </header>\n      <ContentsContainer>\n        <section>\n          {state.board.map((board, index) => (\n            <BoardItem\n              key={index}\n              onClick={() => setSelectedBoard(board)}\n              selected={\n                selectedBoard && selectedBoard.id === board.id ? true : false\n              }\n            >\n              <h2>{board.name}</h2>\n              <h3>{board.type}</h3>\n            </BoardItem>\n          ))}\n        </section>\n        <section>\n          <div>\n            <h2 onClick={() => createNewBoard()}>Create new board</h2>\n            <h2 onClick={() => deleteBoard()}>Delete board</h2>\n            <h2 onClick={() => openBoard()}>Open board</h2>\n          </div>\n        </section>\n      </ContentsContainer>\n    </BoardListContainer>\n  );\n}\n\nconst BoardListContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: rgba(0, 0, 0, 0.2);\n  backdrop-filter: blur(8px);\n  color: white;\n  height: 60vh;\n  width: 70vw;\n`;\n\nconst BoardListTitle = styled.h1`\n  text-align: center;\n  margin: 0;\n  font-size: 2rem;\n  background-color: rgba(0, 0, 0, 0.8);\n  padding: 2rem 0;\n  text-shadow: 3px 3px 4px rgba(255, 255, 255, 0.4);\n`;\n\nconst ContentsContainer = styled.main`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  text-shadow: 3px 3px 4px rgba(255, 255, 255, 0.4);\n\n  > section:nth-child(1) {\n    flex: 3;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  > section:nth-child(2) {\n    flex: 1;\n    border-left: 2px solid rgba(255, 255, 255, 0.7);\n    background-color: rgba(0, 0, 0, 0.5);\n\n    > div {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      text-align: center;\n\n      > h2 {\n        cursor: pointer;\n      }\n    }\n  }\n`;\n\nconst BoardItem = styled.div`\n  padding: 0 2rem;\n  cursor: pointer;\n  height: fit-content;\n  text-align: center;\n  background-color: ${(props) =>\n    props.selected ? \"rgba(255, 255, 255, 0.1);\" : \"transparent\"};\n  transition: 0.3s ease-in-out;\n`;\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":12},{"ruleId":"77","severity":1,"message":"78","line":296,"column":21,"nodeType":"79","endLine":296,"endColumn":41},{"ruleId":"80","severity":1,"message":"81","line":96,"column":6,"nodeType":"82","endLine":96,"endColumn":8,"suggestions":"83"},{"ruleId":"80","severity":1,"message":"84","line":19,"column":6,"nodeType":"82","endLine":19,"endColumn":8,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'News' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCreateNew'. Either include it or remove the dependency array. If 'setCreateNew' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["88"],"React Hook useEffect has a missing dependency: 'setBoardList'. Either include it or remove the dependency array. If 'setBoardList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["89"],"no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [setCreateNew]",{"range":"94","text":"95"},"Update the dependencies array to be: [setBoardList]",{"range":"96","text":"97"},[1805,1807],"[setCreateNew]",[421,423],"[setBoardList]"]