[{"/home/gc/gc/react/gcboard/src/index.js":"1","/home/gc/gc/react/gcboard/src/App.js":"2","/home/gc/gc/react/gcboard/src/components/HeaderMenu.js":"3","/home/gc/gc/react/gcboard/src/components/Board.js":"4","/home/gc/gc/react/gcboard/src/components/Cards.js":"5","/home/gc/gc/react/gcboard/src/components/Lists.js":"6","/home/gc/gc/react/gcboard/src/api/api.js":"7","/home/gc/gc/react/gcboard/src/components/Error.js":"8","/home/gc/gc/react/gcboard/src/components/NewBoard.js":"9","/home/gc/gc/react/gcboard/src/components/News.js":"10","/home/gc/gc/react/gcboard/src/components/Weather.js":"11","/home/gc/gc/react/gcboard/src/components/TimeAndDate.js":"12","/home/gc/gc/react/gcboard/src/components/Profile.js":"13","/home/gc/gc/react/gcboard/src/components/BoardList.js":"14"},{"size":219,"mtime":1613404203866,"results":"15","hashOfConfig":"16"},{"size":3520,"mtime":1618982201539,"results":"17","hashOfConfig":"16"},{"size":2081,"mtime":1618982455953,"results":"18","hashOfConfig":"16"},{"size":4280,"mtime":1618981233208,"results":"19","hashOfConfig":"16"},{"size":10322,"mtime":1618982217923,"results":"20","hashOfConfig":"16"},{"size":12161,"mtime":1618978751782,"results":"21","hashOfConfig":"16"},{"size":812,"mtime":1614979794559,"results":"22","hashOfConfig":"16"},{"size":831,"mtime":1614935072334,"results":"23","hashOfConfig":"16"},{"size":5823,"mtime":1618966742876,"results":"24","hashOfConfig":"16"},{"size":1436,"mtime":1618443866561,"results":"25","hashOfConfig":"16"},{"size":2857,"mtime":1618982486509,"results":"26","hashOfConfig":"16"},{"size":1233,"mtime":1618538039940,"results":"27","hashOfConfig":"16"},{"size":641,"mtime":1615240630313,"results":"28","hashOfConfig":"29"},{"size":2880,"mtime":1618982210443,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"s5h7as",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3jh964",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/home/gc/gc/react/gcboard/src/index.js",[],["61","62"],"/home/gc/gc/react/gcboard/src/App.js",[],"/home/gc/gc/react/gcboard/src/components/HeaderMenu.js",["63"],"/home/gc/gc/react/gcboard/src/components/Board.js",[],"/home/gc/gc/react/gcboard/src/components/Cards.js",[],"/home/gc/gc/react/gcboard/src/components/Lists.js",["64"],"import { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Button from \"@material-ui/core/Button\";\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\nimport { ACTIONS } from \"../App\";\n\nimport styled from \"styled-components/macro\";\nimport {\n  faEllipsisH,\n  faPlus,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"@material-ui/core/Modal\";\n\nexport default function Lists({\n  state,\n  dispatch,\n  handleModalOpen,\n  setOpen,\n  currentBoard,\n}) {\n  const [card, setCard] = useState(\"\");\n  const [editListTitle, setEditListTitle] = useState({\n    listTitle: \"\",\n    edit: false,\n  });\n\n  const { lists } = currentBoard;\n\n  editListTitle.edit &&\n    window.addEventListener(\n      \"keydown\",\n      (e) =>\n        e.code === \"Escape\" && setEditListTitle({ listTitle: \"\", edit: false })\n    );\n\n  const renderAddCard = (index, listTitle) => {\n    const show = state.showAddCard\n      ? state.showAddCard.id === index\n        ? state.showAddCard.show\n        : false\n      : false;\n    return (\n      <AddCard show={show}>\n        <input\n          value={card}\n          placeholder=\"Enter card title\"\n          onChange={(e) => {\n            setCard(e.target.value);\n          }}\n          onKeyDown={(e) => {\n            e.target.value !== \"\" &&\n              (e.code === \"Enter\" || e.code === \"NumpadEnter\") &&\n              addCard(listTitle);\n          }}\n        />\n        <div>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              if (card !== \"\") {\n                addCard(listTitle);\n              } else {\n                errorModalOpen(\"Card must have title\");\n              }\n            }}\n          >\n            Add\n          </Button>\n          <XButton>\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={() => {\n                if (index === state.showAddCard.id) {\n                  dispatch({ type: ACTIONS.ADD_CARD, index });\n                }\n              }}\n            />\n          </XButton>\n        </div>\n      </AddCard>\n    );\n  };\n\n  const renderCards = (listTitle) => {\n    if (lists.length !== 0) {\n      const currentList = lists.filter((list) => list.title === listTitle);\n      return currentList[0].cards.map((item, index) => {\n        return (\n          <ListItems\n            key={index}\n            onClick={() => {\n              setOpen(true);\n              handleModalOpen(item, currentList[0].title, index);\n            }}\n          >\n            {item.title}\n          </ListItems>\n        );\n      });\n    } else {\n      return null;\n    }\n  };\n\n  const renderAddList = () => {\n    return (\n      <AddList>\n        <input\n          placeholder=\"Enter list title\"\n          onChange={(e) => {\n            dispatch({\n              type: ACTIONS.ADD_LIST,\n              add: true,\n              value: e.target.value,\n            });\n          }}\n        />\n        <div>\n          <Button\n            variant=\"contained\"\n            onClick={(e) => {\n              e.preventDefault();\n              addList();\n            }}\n          >\n            Add\n          </Button>\n          <XButton>\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={() => {\n                dispatch({ type: ACTIONS.ADD_LIST, add: false, value: \"\" });\n              }}\n            />\n          </XButton>\n        </div>\n      </AddList>\n    );\n  };\n\n  const showListMenu = (listTitle, index) => {\n    return (\n      <ListMenu className=\"listMenu\">\n        <div className=\"listMenu\">Sort by</div>\n        <div\n          className=\"listMenu\"\n          onClick={() => {\n            deleteList(listTitle);\n            dispatch({ type: ACTIONS.LIST_MENU, index });\n          }}\n        >\n          Delete\n        </div>\n      </ListMenu>\n    );\n  };\n\n  const errorModalOpen = (message) => {\n    dispatch({ type: ACTIONS.SHOW_MODAL, payload: { show: true, message } });\n  };\n\n  const onModalClose = () => {\n    dispatch({\n      type: ACTIONS.SHOW_MODAL,\n      payload: { show: false, message: \"\" },\n    });\n  };\n\n  const showErrorModal = (message) => {\n    return (\n      <Modal\n        open={state.showModal.show}\n        onClose={onModalClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <Error message={message} />\n      </Modal>\n    );\n  };\n\n  const addCard = (listTitle) => {\n    const time =\n      new Date().getHours() > 12\n        ? `${new Date().getHours() - 12}:${new Date().getMinutes()}PM`\n        : `${new Date().getHours()}:${new Date().getMinutes()}AM`;\n    const timeStamp = `${time} ${new Date().getMonth()}/${new Date().getDate()}/${new Date().getFullYear()}`;\n    const newCard = {\n      title: card,\n      timeStamp,\n      description: \"\",\n      comments: [\n        { text: `This card was created by Isaac`, created: timeStamp },\n      ],\n    };\n    const list = lists.find((item) => item.title === listTitle);\n    list.cards = [...list.cards, newCard];\n\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: [...state.board] },\n    });\n    setCard(\"\");\n  };\n\n  const addList = () => {\n    if (state.addList.title !== \"\") {\n      lists.push({ title: state.addList.title, cards: [] });\n      dispatch({\n        type: ACTIONS.CURRENT_BOARD,\n        payload: { newBoard: [...state.board] },\n      });\n      dispatch({ type: ACTIONS.ADD_LIST, add: false, value: \"\" });\n    } else {\n      errorModalOpen(\"List must have title\");\n    }\n  };\n\n  const deleteList = (listTitle) => {\n    const updatedList = lists.filter((item) => item.title !== listTitle);\n    const newBoard = {\n      name: currentBoard.name,\n      selected: currentBoard.selected,\n      lists: updatedList,\n      type: currentBoard.type,\n      id: currentBoard.id,\n    };\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: [newBoard] },\n    });\n  };\n\n  const changeListName = () => {\n    dispatch({\n      type: ACTIONS.CURRENT_BOARD,\n      payload: { newBoard: state.board },\n    });\n    setEditListTitle({ listTitle: \"\", edit: false });\n  };\n\n  return (\n    <ListContainer>\n      {showErrorModal(state.showModal.message)}\n\n      <div>\n        {lists.map((item, index) => {\n          const show =\n            state.showAddCard.id === index ? !state.showAddCard.show : true;\n\n          return (\n            <List key={index} className=\"list\">\n              {state.listMenu\n                ? state.listMenu.id === index &&\n                  state.listMenu.show &&\n                  showListMenu(item.title, index)\n                : null}\n              <ListHeader>\n                <div\n                  onClick={() => {\n                    dispatch({ type: ACTIONS.LIST_MENU, index });\n                  }}\n                >\n                  <FontAwesomeIcon icon={faEllipsisH} />\n                </div>\n                <ListTitle\n                  onClick={() =>\n                    setEditListTitle({ listTitle: item.title, edit: true })\n                  }\n                >\n                  {editListTitle.edit &&\n                  editListTitle.listTitle === item.title ? (\n                    <input\n                      defaultValue={item.title}\n                      onChange={(e) => {\n                        currentBoard.lists[index].title = e.target.value;\n                      }}\n                      onKeyDown={(e) =>\n                        e.target.value !== \"\" &&\n                        (e.code === \"Enter\" || e.code === \"NumpadEnter\") &&\n                        changeListName()\n                      }\n                      autoFocus={true}\n                    />\n                  ) : (\n                    <a rel=\"noreferrer\">{item.title}</a>\n                  )}\n                </ListTitle>\n              </ListHeader>\n\n              <section>{renderCards(item.title)}</section>\n              <section>\n                {renderAddCard(index, item.title)}\n                <AddAnotherCard\n                  show={show}\n                  onClick={() => {\n                    dispatch({ type: ACTIONS.ADD_CARD, index });\n                  }}\n                >\n                  <FontAwesomeIcon icon={faPlus} /> Add another card\n                </AddAnotherCard>\n              </section>\n            </List>\n          );\n        })}\n        <AddAnotherList>\n          {state.addList.add ? (\n            renderAddList()\n          ) : (\n            <div\n              onClick={() =>\n                dispatch({\n                  type: ACTIONS.ADD_LIST,\n                  add: true,\n                  value: state.addList.title,\n                })\n              }\n            >\n              <FontAwesomeIcon icon={faPlus} />{\" \"}\n              {lists.length !== 0 ? \"Add Another List\" : \"Add a list\"}\n            </div>\n          )}\n        </AddAnotherList>\n      </div>\n    </ListContainer>\n  );\n}\n\nLists.propTypes = {\n  state: PropTypes.shape({\n    addList: PropTypes.shape({\n      add: PropTypes.bool.isRequired,\n      title: PropTypes.string,\n    }).isRequired,\n    currentBoard: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        selected: PropTypes.bool.isRequired,\n        lists: PropTypes.array,\n      })\n    ),\n    listMenu: PropTypes.shape({\n      id: PropTypes.number,\n      show: PropTypes.bool.isRequired,\n    }).isRequired,\n    showAddCard: PropTypes.shape({\n      id: PropTypes.number,\n      show: PropTypes.bool.isRequired,\n    }).isRequired,\n    showModal: PropTypes.shape({\n      show: PropTypes.bool.isRequired,\n      message: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  handleModalOpen: PropTypes.func.isRequired,\n  setOpen: PropTypes.func.isRequired,\n};\n\n/*\n\n\n\n\nStyles\n\n\n\n\n\n*/\n\nconst ListContainer = styled.div`\n  width: 100%;\n  height: fit-content;\n  margin-top: 26vh;\n  > div {\n    display: flex;\n  }\n`;\n\nconst List = styled.div`\n  min-width: 18rem;\n  height: fit-content;\n  background-color: rgba(0, 0, 0, 0.5);\n  backdrop-filter: blur(1.5px);\n  margin: 0 0.75rem 0 0.75rem;\n  padding: 0.5rem;\n  border-radius: 0.5rem;\n  color: white;\n  font-weight: 500;\n`;\n\nconst ListItems = styled.div`\n  padding: 0.5rem;\n  margin: 0.75rem 0 0.75rem 0;\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: 0.5s;\n  box-shadow: 0 0 3px 0.2px white;\n  &:hover {\n    filter: brightness(70%);\n    transition: 0.75s;\n  }\n`;\n\nconst ListHeader = styled.div`\n  height: 5vh;\n  display: flex;\n  flex-direction: column;\n  > div:nth-child(1) {\n    cursor: pointer;\n    width: fit-content;\n    position: absolute;\n  }\n`;\n\nconst ListTitle = styled.div`\n  height: 100%;\n  text-align: center;\n  font-weight: 600;\n  font-size: 1.5rem;\n  display: flex;\n  justify-content: center;\n\n  > a {\n    cursor: pointer;\n    text-decoration: none;\n    color: inherit;\n    align-self: center;\n  }\n\n  > input {\n    height: 2rem;\n    align-self: center;\n    background-color: transparent;\n    outline: none;\n    border: none;\n    color: white;\n    font-weight: 600;\n    font-size: 1.5rem;\n    text-align: center;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n\n  > input::placeholder {\n    font-size: 1.5rem;\n    color: white;\n    background-color: rgba(0, 0, 0, 0.5);\n    text-align: center;\n    font-weight: 600;\n  }\n`;\n\nconst XButton = styled.div`\n  font-size: 2rem;\n  vertical-align: middle;\n`;\n\nconst AddAnotherCard = styled.div`\n  display: ${(props) => (props.show ? \"flex\" : \"none\")};\n  cursor: pointer;\n`;\n\nconst AddList = styled.div`\n  display: flex;\n  flex-direction: column;\n  > input {\n    height: 1.5rem;\n  }\n  > div {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 1rem;\n  }\n`;\n\nconst AddCard = styled(AddList)`\n  display: ${(props) => (props.show ? \"flex\" : \"none\")};\n`;\n\nconst AddAnotherList = styled(List)``;\n\nconst ListMenu = styled.div`\n  position: absolute;\n  background-color: rgba(102, 101, 99, 0.568);\n  backdrop-filter: blur(1.5px);\n  width: 95.5%;\n  text-align: center;\n  font-weight: 600;\n  bottom: 105%;\n  z-index: -10;\n  > div {\n    padding: 0.5rem 0;\n    cursor: pointer;\n  }\n`;\n","/home/gc/gc/react/gcboard/src/api/api.js",[],"/home/gc/gc/react/gcboard/src/components/Error.js",[],"/home/gc/gc/react/gcboard/src/components/NewBoard.js",[],"/home/gc/gc/react/gcboard/src/components/News.js",[],"/home/gc/gc/react/gcboard/src/components/Weather.js",[],"/home/gc/gc/react/gcboard/src/components/TimeAndDate.js",[],"/home/gc/gc/react/gcboard/src/components/Profile.js",[],"/home/gc/gc/react/gcboard/src/components/BoardList.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"74","line":288,"column":21,"nodeType":"75","endLine":288,"endColumn":41},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'News' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]